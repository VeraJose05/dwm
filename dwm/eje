struct Theme{
    char *inactive;
    char *active;
    char *bg;
    char *focus;
}

static const struct Theme material = {
    .inactive = "#4c566a",
    .active = "#ffffff",
    .bg = "#0f101a",
    .focus = "#a151d3"
};

static const struct Theme onedark = {
    .inactive = "#4c566a",
    .active = "#ffffff",
    .bg = "#1e2127",
    .focus = "#E06C75"
};

static const struct Theme nord = {
    .inactive = "#4c566a",
    .active = "#ffffff",
    .bg = "#2e3440",
    .focus = "#81a1c1"
};

static const struct Theme monokai_pro = {
    .inactive = "#727072",
    .active = "#2d2a2e",
    .bg = "#2d2a2e",
    .focus = "#a9dc76"
}; 

static const char window_border[] = "#000000";

static const char *colors[][3] = {
    // fg                 bg             border   
    { material.inactive, material.bg, window_border },
    { material.active, material.focus,  material.focus  },

    { onedark.inactive, onedark.bg, window_border },
    { onedark.active, onedark.focus,  onedark.focus  },

    { nord.inactive, nord.bg, window_border },
    { nord.active, nord.focus,  nord.focus  },

    { monokai_pro.inactive, monokai_pro.bg, window_border },
    { monokai_pro.active, monokai_pro.focus,  monokai_pro.focus },
};


/* Function to change the theme */
void
settheme(const Arg *arg)
{
    if (arg->i >= 0 && arg->i < LENGTH(themes)) {
        /* Change the color scheme */
        memcpy(scheme, colors[SchemeNorm], sizeof(colors[SchemeNorm]));
        memcpy(scheme + 1, colors[SchemeSel], sizeof(colors[SchemeSel]));
        memcpy(titlecolor, colors[SchemeTitle], sizeof(colors[SchemeTitle]));

        /* Change the theme */
        if (!strcmp(themes[arg->i], "monokai_pro"))
            memcpy(scheme, &monokai_pro, sizeof(struct Theme));
        else if (!strcmp(themes[arg->i], "material"))
            memcpy(scheme, &material, sizeof(struct Theme));
        else if (!strcmp(themes[arg->i], "onedark"))
            memcpy(scheme, &onedark, sizeof(struct Theme));
        else if (!strcmp(themes[arg->i], "nord"))
            memcpy(scheme, &nord, sizeof(struct Theme));
        
        /* Redraw all windows */
        arrange(NULL);
    }
}